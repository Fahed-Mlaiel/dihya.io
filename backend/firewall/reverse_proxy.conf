# reverse_proxy.conf – Exemple de configuration NGINX pour intégration du firewall Dihya
# Redirige le trafic vers le firewall Node.js (port 4000) puis vers l’API principale (port 8000)

server {
    listen 80;
    server_name dihya.app;

    # Proxy vers le firewall Node.js
    location / {
        proxy_pass http://localhost:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 90;
    }
}

# Exemple d’enchaînement :
# 1. NGINX reçoit la requête → 2. Passe par le firewall Node.js (audit, sécurité, RGPD) → 3. Redirige vers l’API principale (Flask/Django/FastAPI…)
# Pour proxy_pass final, adapter la config du firewall pour router vers l’API backend (ex: http://localhost:8000)
